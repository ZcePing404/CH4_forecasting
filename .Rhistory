setwd("E:/Statistic/supplement_sales_forecasting")
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
source("stationary_test.R")
source("differencing_method.R")
source("ARIMA.R")
# Read dataset
df <- read_csv("nitrous_oxide_concentration.csv")
print(df)
str(df)
processed_data <- preprocess_data(df)
df_clean = processed_data$df
ts_data = processed_data$ts_data
# show the resulting monthly data frame to check the output
print(df_clean)
# Plot time series
ggplot(df_clean, aes(x = date, y = average)) +
geom_line(color = "steelblue") +
labs(title = "Monthly Nitrous Oxide Concentration",
x = "date", y = "Avg Concentration")
# ggplot(df_clean, aes(x = average)) +
#   geom_histogram(fill = "skyblue", bins = 30, color = "black") +
#   labs(title = "Distribution of nitrous oxide concentration",
#        x = "Avg. Concentration", y = "Count")
stationary_test(df_clean)
differencing_method(df_clean)
Data <- df_clean$average
train_size <- floor(0.80 * length(Data))
train <- head(Data, train_size)
min_date <- min(df_clean$date)
min_year <- as.numeric(format(min_date, "%Y"))
min_month <- as.numeric(format(min_date, "%m"))
test  <- tail(Data, length(Data) - train_size)
ts_train <- ts(train,
frequency = 12,
start = c(min_year, min_month))
# Get the last date of the training set
last_train_date <- max(df_clean$date[1:length(train)])
first_test_date <- last_train_date %m+% months(1) # Find the date of the first observation in the test set
# Use the year and month of the first test date to set the start of the ts object
ts_test <- ts(test,
start = c(year(first_test_date), month(first_test_date)),
frequency = 12)
checkresiduals(ts_train)
# -------------------------------
# Manual ARIMA
# -------------------------------
fit <- Arima(ts_train, order=c(0,1,0), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
# -------------------------------
# Manual ARIMA
# -------------------------------
fit <- Arima(ts_train, order=c(0,1,2), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
# -------------------------------
# Manual ARIMA
# -------------------------------
fit <- Arima(ts_train, order=c(0,1,4), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
# -------------------------------
# Manual ARIMA
# -------------------------------
fit <- Arima(ts_train, order=c(0,1,1), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
# -------------------------------
# Manual ARIMA
# -------------------------------
fit <- Arima(ts_train, order=c(0,1,4), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
# -------------------------------
# Manual ARIMA
# -------------------------------
fit <- Arima(ts_train, order=c(0,1,2), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
# -------------------------------
# Auto ARIMA
# -------------------------------
fit2 <- auto.arima(ts_data, seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
checkresiduals(fit2)
summary(fit2)
# -------------------------------
# Manual ARIMA
# -------------------------------
fit <- Arima(ts_train, order=c(0,1,0), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
# -------------------------------
# Auto ARIMA
# -------------------------------
fit2 <- auto.arima(ts_data, seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
checkresiduals(fit2)
summary(fit2)
# Forecast for the auto fit arima
fr <- forecast(fit2, h = length(test))
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
fit2 <- auto.arima(ts_data, seasonal = T, trace = T, approximation = F)
checkresiduals(fit2)
summary(fit2)
# Forecast for the auto fit arima
fr <- forecast(fit2, h = length(test))
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
setwd("E:/Statistic/supplement_sales_forecasting")
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
source("stationary_test.R")
source("differencing_method.R")
source("ARIMA.R")
# Read dataset
df <- read_csv("nitrous_oxide_concentration.csv")
print(df)
str(df)
processed_data <- preprocess_data(df)
df_clean = processed_data$df
ts_data = processed_data$ts_data
# show the resulting monthly data frame to check the output
print(df_clean)
# Plot time series
ggplot(df_clean, aes(x = date, y = average)) +
geom_line(color = "steelblue") +
labs(title = "Monthly Nitrous Oxide Concentration",
x = "date", y = "Avg Concentration")
# ggplot(df_clean, aes(x = average)) +
#   geom_histogram(fill = "skyblue", bins = 30, color = "black") +
#   labs(title = "Distribution of nitrous oxide concentration",
#        x = "Avg. Concentration", y = "Count")
stationary_test(df_clean)
differencing_method(df_clean)
Data <- df_clean$average
train_size <- floor(0.80 * length(Data))
train <- head(Data, train_size)
min_date <- min(df_clean$date)
min_year <- as.numeric(format(min_date, "%Y"))
min_month <- as.numeric(format(min_date, "%m"))
test  <- tail(Data, length(Data) - train_size)
ts_train <- ts(train,
frequency = 12,
start = c(min_year, min_month))
# Get the last date of the training set
last_train_date <- max(df_clean$date[1:length(train)])
first_test_date <- last_train_date %m+% months(1) # Find the date of the first observation in the test set
# Use the year and month of the first test date to set the start of the ts object
ts_test <- ts(test,
start = c(year(first_test_date), month(first_test_date)),
frequency = 12)
checkresiduals(ts_train)
# -------------------------------
# Auto ARIMA
# -------------------------------
fit2 <- auto.arima(ts_data, seasonal = T, trace = T, approximation = F)
checkresiduals(fit2)
summary(fit2)
# Forecast for the auto fit arima
fr <- forecast(fit2, h = length(test))
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
fit2 <- auto.arima(ts_train, seasonal = T, trace = T, approximation = F)
checkresiduals(fit2)
summary(fit2)
# Forecast for the auto fit arima
fr <- forecast(fit2, h = length(test))
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
# -------------------------------
# Manual ARIMA
# -------------------------------
fit <- Arima(ts_train, order=c(0,1,0), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
fit2 <- auto.arima(ts_train, seasonal = T, trace = T, approximation = F)
checkresiduals(fit2)
summary(fit2)
# Forecast for the auto fit arima
fr <- forecast(fit2, h = length(test))
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
accuracy(fr, ts_test)
hw <- HoltWinters(train, alpha=0.2, beta=0.1, gamma=0.1)
hw <- HoltWinters(ts_train, alpha=0.2, beta=0.1, gamma=0.1)
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test),
prediction.interval=T, level=.95)
plot(hw,forecast)
lines(test, col="turquoise2")
hw <- HoltWinters(ts_train)
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test),
prediction.interval=T, level=.95)
plot(hw,forecast)
lines(test, col="turquoise2")
hw <- HoltWinters(ts_train)
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test),
prediction.interval=T, level=.95)
plot(hw,forecast)
lines(test, col="turquoise2")
hw <- HoltWinters(ts_train)
hw
hw <- HoltWinters(ts_train)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test),
prediction.interval=T, level=.95)
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0.8 ,gamma=0.8202564 )
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0 ,gamma=0.8202564 )
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=1 ,gamma=0.8202564 )
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
ets(ts_train)
hw <- HoltWinters(ts_train, alpha=1 ,beta=1 ,gamma=0.8633)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0.6 ,gamma=0.8633)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=0.5 ,beta=1 ,gamma=0.8633)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0.3 ,gamma=0.8633)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0.9 ,gamma=0.8633)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0.6 ,gamma=0.8633)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0.7 ,gamma=0.8633)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0.5 ,gamma=0.8633)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0.4 ,gamma=0.8633)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0.8 ,gamma=0.5)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
hw <- HoltWinters(ts_train, alpha=1 ,beta=0.8 ,gamma=0.1)
hw
checkresiduals(hw)
f1 <- forecast(hw, h=length(test))
accuracy(f1, test)
forecast <- predict(object=hw, n.ahead=length(test))
plot(hw,forecast)
lines(ts_test, col="turquoise2")
ets(ts_train)
fit <- ets(ts_train)
autoplot(fit)
summary(fit)
checkresiduals(fit)
fr <- forecast(fit, h=length(test))
accuracy(fr, test)
plot(fr)
lines(test, col="turquoise2")
