library(readr)
Supplement_Sales_Weekly_Expanded <- read_csv("E:/Statistic/supplement_sales_forecasting/Supplement_Sales_Weekly_Expanded.csv")
View(Supplement_Sales_Weekly_Expanded)
# Load packages
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
# Load packages
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
source("preprocessing.R")
# Load packages
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("E:/Statistic/supplement_sales_forecasting/preprocessing.R")
source("E:/Statistic/supplement_sales_forecasting/eda_time_series.R")
# Read dataset
df <- read_csv("E:/Statistic/supplement_sales_forecasting/Supplement_Sales_Weekly_Expanded.csv")
df_weekly <- df %>%
group_by(Date) %>%
summarise(TotalRevenue = sum(Revenue), .groups = "drop")
df_clean <- preprocess_data(df_weekly)
# Plot time series
ggplot(df_clean, aes(x = Date, y = TotalRevenue)) +
geom_line(color = "steelblue") +
labs(title = "Total Revenue Over Time",
x = "Date", y = "Revenue")
ggplot(df_clean, aes(x = TotalRevenue)) +
geom_histogram(fill = "skyblue", bins = 30, color = "black") +
labs(title = "Distribution of Revenue",
x = "Revenue", y = "Count")
Data <- df_weekly$TotalRevenue
train_size <- floor(0.80 * length(Data))
train <- head(Data, train_size)
train
test  <- tail(Data, length(Data) - train_size)
ts_train <- ts(train, frequency = 52,
start = c(year(min(df_weekly$Date)), week(min(df_weekly$Date))))
ts_train
ts_test <- test
ts_test
eda_results <- eda_time_series(df_clean)
setwd("E:/Statistic/supplement_sales_forecasting")
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
source("eda_time_series.R")
# Read dataset
df <- read_csv("intermittent-renewables-production-france.csv")
df
str(df)
# Aggregate to weekly level
df_daily <- df %>%
group_by(Date) %>%
summarise(DailyProduction = mean(Production, na.rm = TRUE))
df_clean <- preprocess_data(df_daily)
# Plot time series
ggplot(df_clean, aes(x = Date, y = DailyProduction)) +
geom_line(color = "steelblue") +
labs(title = "Total Production Over Time",
x = "Date", y = "Production")
ggplot(df_clean, aes(x = DailyProduction)) +
geom_histogram(fill = "skyblue", bins = 30, color = "black") +
labs(title = "Distribution of Production",
x = "Production", y = "Count")
eda_results <- eda_time_series(df_clean)
Data <- df_clean$DailyProduction
train_size <- floor(0.80 * length(Data))
train <- head(Data, train_size)
train
test  <- tail(Data, length(Data) - train_size)
ts_train <- ts(train,
frequency = 365,
start = c(year(min(df_clean$Date)), yday(min(df_clean$Date))))
ts_train
ts_test <- ts(test,
start = time(ts_train)[length(ts_train)] + 1/365,
frequency = 365)
checkresiduals(ts_train)
Box.test(ts_train, lag = 10, type = "Ljung-Box") # fail to reject, our dataset is white noise
fit_sarima <- auto.arima(ts_train, seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Summary of the SARIMA model
summary(fit_sarima)
# Forecast for the length of the test set
fcast_sarima <- forecast(fit_sarima, h = length(test))
# Plot forecast vs actual
autoplot(fcast_sarima) +
labs(title = "SARIMA Forecast vs Actual",
x = "Time", y = "Daily Production") +
theme_minimal()
# Accuracy metrics
accuracy(fcast_sarima, ts_test)
str(df)
df_clean <- preprocess_data(df_daily)
str(df_clean)
setwd("E:/Statistic/supplement_sales_forecasting")
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
source("eda_time_series.R")
# Read dataset
df <- read_csv("intermittent-renewables-production-france.csv")
df
str(df)
# Aggregate to weekly level
df_daily <- df %>%
group_by(Date) %>%
summarise(DailyProduction = mean(Production, na.rm = TRUE))
df_clean <- preprocess_data(df_daily)
str(df_clean)
monthly_production <- df_clean %>%
mutate(MonthYear = floor_date(Date, "month")) %>%
group_by(MonthYear) %>%
summarise(
MonthlyProduction = sum(DailyProduction, na.rm = TRUE)
) %>%
ungroup()
# Print the resulting monthly data frame to check the output
print(monthly_production)
setwd("E:/Statistic/supplement_sales_forecasting")
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
source("eda_time_series.R")
# Read dataset
df <- read_csv("intermittent-renewables-production-france.csv")
df
str(df)
# Aggregate to weekly level
df_daily <- df %>%
group_by(Date) %>%
summarise(DailyProduction = mean(Production, na.rm = TRUE))
df_clean <- preprocess_data(df_daily)
str(df_clean)
df_clean <- df_clean %>%
mutate(MonthYear = floor_date(Date, "month")) %>%
group_by(MonthYear) %>%
summarise(
MonthlyProduction = sum(DailyProduction, na.rm = TRUE)
) %>%
ungroup()
# Print the resulting monthly data frame to check the output
print(monthly_production)
# Plot time series
ggplot(df_clean, aes(x = Date, y = DailyProduction)) +
geom_line(color = "steelblue") +
labs(title = "Total Production Over Time",
x = "Date", y = "Production")
setwd("E:/Statistic/supplement_sales_forecasting")
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
source("eda_time_series.R")
# Read dataset
df <- read_csv("intermittent-renewables-production-france.csv")
df
str(df)
# Aggregate to weekly level
df_daily <- df %>%
group_by(Date) %>%
summarise(MonthlyProduction = mean(Production, na.rm = TRUE))
df_clean <- preprocess_data(df_daily)
str(df_clean)
df_clean <- df_clean %>%
mutate(MonthYear = floor_date(Date, "month")) %>%
group_by(MonthYear) %>%
summarise(
MonthlyProduction = sum(MonthlyProduction, na.rm = TRUE)
) %>%
ungroup()
# Print the resulting monthly data frame to check the output
print(monthly_production)
# Plot time series
ggplot(df_clean, aes(x = Date, y = MonthlyProduction)) +
geom_line(color = "steelblue") +
labs(title = "Total Production Over Time",
x = "Date", y = "Production")
setwd("E:/Statistic/supplement_sales_forecasting")
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
source("eda_time_series.R")
# Read dataset
df <- read_csv("intermittent-renewables-production-france.csv")
df
str(df)
# Aggregate to weekly level
df_daily <- df %>%
group_by(Date) %>%
summarise(MonthlyProduction = mean(Production, na.rm = TRUE))
df_clean <- preprocess_data(df_daily)
str(df_clean)
df_clean <- df_clean %>%
mutate(MonthYear = floor_date(Date, "month")) %>%
group_by(MonthYear) %>%
summarise(
MonthlyProduction = sum(MonthlyProduction, na.rm = TRUE)
) %>%
ungroup()
# Print the resulting monthly data frame to check the output
print(monthly_production)
# Plot time series
# ggplot(df_clean, aes(x = Date, y = MonthlyProduction)) +
#   geom_line(color = "steelblue") +
#   labs(title = "Total Production Over Time",
x = "Date", y = "Monthly")
View(monthly_production)
setwd("E:/Statistic/supplement_sales_forecasting")
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
source("eda_time_series.R")
# Read dataset
df <- read_csv("intermittent-renewables-production-france.csv")
df
str(df)
# Aggregate to weekly level
df_daily <- df %>%
group_by(Date) %>%
summarise(MonthlyProduction = mean(Production, na.rm = TRUE))
df_clean <- preprocess_data(df_daily)
str(df_clean)
df_clean <- df_clean %>%
mutate(Date = floor_date(Date, "month")) %>%
group_by(Date) %>%
summarise(
MonthlyProduction = sum(MonthlyProduction, na.rm = TRUE)
) %>%
ungroup()
# Print the resulting monthly data frame to check the output
print(monthly_production)
# Plot time series
# ggplot(df_clean, aes(x = Date, y = MonthlyProduction)) +
#   geom_line(color = "steelblue") +
#   labs(title = "Total Production Over Time",
x = "Date", y = "Monthly")
setwd("E:/Statistic/supplement_sales_forecasting")
library(readr)     # to read csv
library(dplyr)     # for data manipulation
library(lubridate) # to handle dates
library(forecast)  # ARIMA forecasting
library(ggplot2)   # plotting
library(tseries)
library(urca)
library(zoo)
source("preprocessing.R")
source("eda_time_series.R")
# Read dataset
df <- read_csv("intermittent-renewables-production-france.csv")
df
str(df)
# Aggregate to weekly level
df_daily <- df %>%
group_by(Date) %>%
summarise(MonthlyProduction = mean(Production, na.rm = TRUE))
df_clean <- preprocess_data(df_daily)
str(df_clean)
df_clean <- df_clean %>%
mutate(Date = floor_date(Date, "month")) %>%
group_by(Date) %>%
summarise(
MonthlyProduction = sum(MonthlyProduction, na.rm = TRUE)
) %>%
ungroup()
# Print the resulting monthly data frame to check the output
print(monthly_production)
# Plot time series
# ggplot(df_clean, aes(x = Date, y = MonthlyProduction)) +
#   geom_line(color = "steelblue") +
#   labs(title = "Total Production Over Time",
#       x = "Date", y = "Monthly")
# ggplot(df_clean, aes(x = MonthlyProduction)) +
#  geom_histogram(fill = "skyblue", bins = 30, color = "black") +
#  labs(title = "Distribution of Production",
#       x = "Production", y = "Count")
eda_results <- eda_time_series(df_clean)
