layout(matrix(c(1,1)))
plot(ts_data,
main = "HltWinters Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
lines(es1$fitted[, "xhat"], col = "red")
lines(fc$mean, col = "blue")
polygon(c(time(fc$mean), rev(time(fc$mean))),
c(fc$lower[,2], rev(fc$upper[,2])),   # 95% CI (2nd column)
col = rgb(0, 0, 1, 0.2), border = NA)
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast", "95% CI"),
col = c("black", "red", "blue", rgb(0,0,1,0.2)),
lty = c(1,1,1, NA),
pch = c(NA, NA, NA, 15),
pt.cex = 2,
cex = 0.8)
# }
# HoltWinters_method <-function(){
es1 <- HoltWinters(ts_train,alpha = 1, beta = 0.01, gamma = 0.01)
es1
checkresiduals(es1)
fc <- forecast(es1, h=length(test))
forecast::accuracy(fc, ts_test)
forecast <- predict(es1, n.ahead=length(test), prediction.interval=T, level=.95)
layout(matrix(c(1,1)))
plot(ts_data,
main = "HltWinters Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
lines(es1$fitted[, "xhat"], col = "red")
lines(fc$mean, col = "blue")
polygon(c(time(fc$mean), rev(time(fc$mean))),
c(fc$lower[,2], rev(fc$upper[,2])),   # 95% CI (2nd column)
col = rgb(0, 0, 1, 0.2), border = NA)
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast", "95% CI"),
col = c("black", "red", "blue", rgb(0,0,1,0.2)),
lty = c(1,1,1, NA),
pch = c(NA, NA, NA, 15),
pt.cex = 2,
cex = 0.8)
# }
# HoltWinters_method <-function(){
es1 <- HoltWinters(ts_train,alpha = 1, beta = 0.1, gamma = 0.01)
es1
checkresiduals(es1)
fc <- forecast(es1, h=length(test))
forecast::accuracy(fc, ts_test)
forecast <- predict(es1, n.ahead=length(test), prediction.interval=T, level=.95)
layout(matrix(c(1,1)))
plot(ts_data,
main = "HltWinters Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
lines(es1$fitted[, "xhat"], col = "red")
lines(fc$mean, col = "blue")
polygon(c(time(fc$mean), rev(time(fc$mean))),
c(fc$lower[,2], rev(fc$upper[,2])),   # 95% CI (2nd column)
col = rgb(0, 0, 1, 0.2), border = NA)
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast", "95% CI"),
col = c("black", "red", "blue", rgb(0,0,1,0.2)),
lty = c(1,1,1, NA),
pch = c(NA, NA, NA, 15),
pt.cex = 2,
cex = 0.8)
# }
# HoltWinters_method <-function(){
es1 <- HoltWinters(ts_train,alpha = 1, beta = 0.02, gamma = 0.01)
es1
checkresiduals(es1)
fc <- forecast(es1, h=length(test))
forecast::accuracy(fc, ts_test)
forecast <- predict(es1, n.ahead=length(test), prediction.interval=T, level=.95)
layout(matrix(c(1,1)))
plot(ts_data,
main = "HltWinters Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
lines(es1$fitted[, "xhat"], col = "red")
lines(fc$mean, col = "blue")
polygon(c(time(fc$mean), rev(time(fc$mean))),
c(fc$lower[,2], rev(fc$upper[,2])),   # 95% CI (2nd column)
col = rgb(0, 0, 1, 0.2), border = NA)
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast", "95% CI"),
col = c("black", "red", "blue", rgb(0,0,1,0.2)),
lty = c(1,1,1, NA),
pch = c(NA, NA, NA, 15),
pt.cex = 2,
cex = 0.8)
# }
# HoltWinters_method <-function(){
es1 <- HoltWinters(ts_train,alpha = 1, beta = 0.02, gamma = 1)
es1
checkresiduals(es1)
fc <- forecast(es1, h=length(test))
forecast::accuracy(fc, ts_test)
forecast <- predict(es1, n.ahead=length(test), prediction.interval=T, level=.95)
layout(matrix(c(1,1)))
plot(ts_data,
main = "HltWinters Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
lines(es1$fitted[, "xhat"], col = "red")
lines(fc$mean, col = "blue")
polygon(c(time(fc$mean), rev(time(fc$mean))),
c(fc$lower[,2], rev(fc$upper[,2])),   # 95% CI (2nd column)
col = rgb(0, 0, 1, 0.2), border = NA)
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast", "95% CI"),
col = c("black", "red", "blue", rgb(0,0,1,0.2)),
lty = c(1,1,1, NA),
pch = c(NA, NA, NA, 15),
pt.cex = 2,
cex = 0.8)
# }
# HoltWinters_method <-function(){
es1 <- HoltWinters(ts_train,alpha = 0.5, beta = 0.02, gamma = 1)
es1
checkresiduals(es1)
fc <- forecast(es1, h=length(test))
forecast::accuracy(fc, ts_test)
forecast <- predict(es1, n.ahead=length(test), prediction.interval=T, level=.95)
layout(matrix(c(1,1)))
plot(ts_data,
main = "HltWinters Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
lines(es1$fitted[, "xhat"], col = "red")
lines(fc$mean, col = "blue")
polygon(c(time(fc$mean), rev(time(fc$mean))),
c(fc$lower[,2], rev(fc$upper[,2])),   # 95% CI (2nd column)
col = rgb(0, 0, 1, 0.2), border = NA)
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast", "95% CI"),
col = c("black", "red", "blue", rgb(0,0,1,0.2)),
lty = c(1,1,1, NA),
pch = c(NA, NA, NA, 15),
pt.cex = 2,
cex = 0.8)
# }
# HoltWinters_method <-function(){
es1 <- HoltWinters(ts_train,alpha = 0.8, beta = 0.02, gamma = 1)
es1
checkresiduals(es1)
fc <- forecast(es1, h=length(test))
forecast::accuracy(fc, ts_test)
forecast <- predict(es1, n.ahead=length(test), prediction.interval=T, level=.95)
layout(matrix(c(1,1)))
plot(ts_data,
main = "HltWinters Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
lines(es1$fitted[, "xhat"], col = "red")
lines(fc$mean, col = "blue")
polygon(c(time(fc$mean), rev(time(fc$mean))),
c(fc$lower[,2], rev(fc$upper[,2])),   # 95% CI (2nd column)
col = rgb(0, 0, 1, 0.2), border = NA)
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast", "95% CI"),
col = c("black", "red", "blue", rgb(0,0,1,0.2)),
lty = c(1,1,1, NA),
pch = c(NA, NA, NA, 15),
pt.cex = 2,
cex = 0.8)
# }
prophet_df <- data.frame(ds = df_clean$date, y = df_clean$average)
train_size <- 120
prophet_df_train <- prophet_df[1:train_size, ]
prophet_df_test <- prophet_df[(train_size + 1):nrow(prophet_df), ]
# scales_to_test <- c(0.5, 1, 1.5, 5, 10, 50, 100)
scales_to_test <- c(0.5, 0.6, 0.7, 0.8, 0.9)
results <- data.frame(
scale = numeric(),
train_rmse = numeric(),
test_rmse = numeric()
)
for (s in scales_to_test) {
# Fit the Prophet model with the current scale value
m <- HoltWinters(ts_train,alpha = s, beta = 0.02, gamma = 1)
forecasted_train <- predict(m, prophet_df_train)
train_rmse <- sqrt(mean((prophet_df_train$y - forecasted_train$yhat)^2))
fr <- forecast(es1, h=length(test))
test_rmse <- sqrt(mean((prophet_df_test$y - fr$mean)^2))
results <- rbind(results, data.frame(
scale = s,
train_rmse = train_rmse,
test_rmse = test_rmse
))
}
prophet_df <- data.frame(ds = df_clean$date, y = df_clean$average)
train_size <- 120
prophet_df_train <- prophet_df[1:train_size, ]
prophet_df_test <- prophet_df[(train_size + 1):nrow(prophet_df), ]
# scales_to_test <- c(0.5, 1, 1.5, 5, 10, 50, 100)
scales_to_test <- c(0.5, 0.6, 0.7, 0.8, 0.9)
results <- data.frame(
scale = numeric(),
train_rmse = numeric(),
test_rmse = numeric()
)
for (s in scales_to_test) {
# Fit the Prophet model with the current scale value
m <- HoltWinters(ts_train,alpha = s, beta = 0.02, gamma = 1)
forecasted_train <- predict(m, prophet_df_train)
train_rmse <- sqrt(mean((prophet_df_train$y - forecasted_train$yhat)^2))
fr <- forecast(es1, h=length(test))
test_rmse <- sqrt(mean((prophet_df_test$y - fr$mean)^2))
results <- rbind(results, data.frame(
scale = s,
train_rmse = train_rmse,
test_rmse = test_rmse
))
}
prophet_df <- data.frame(ds = df_clean$date, y = df_clean$average)
train_size <- 120
prophet_df_train <- prophet_df[1:train_size, ]
prophet_df_test <- prophet_df[(train_size + 1):nrow(prophet_df), ]
# scales_to_test <- c(0.5, 1, 1.5, 5, 10, 50, 100)
scales_to_test <- c(0.5, 0.6, 0.7, 0.8, 0.9)
results <- data.frame(
scale = numeric(),
train_rmse = numeric(),
test_rmse = numeric()
)
for (s in scales_to_test) {
# Fit the Prophet model with the current scale value
m <- HoltWinters(ts_train,alpha = s, beta = 0.02, gamma = 1)
forecasted_train <- predict(es1, n.ahead=length(prophet_df_test))
train_rmse <- sqrt(mean((prophet_df_train$y - forecasted_train$yhat)^2))
fr <- forecast(es1, h=length(test))
test_rmse <- sqrt(mean((prophet_df_test$y - fr$mean)^2))
results <- rbind(results, data.frame(
scale = s,
train_rmse = train_rmse,
test_rmse = test_rmse
))
}
prophet_df <- data.frame(ds = df_clean$date, y = df_clean$average)
train_size <- 120
prophet_df_train <- prophet_df[1:train_size, ]
prophet_df_test <- prophet_df[(train_size + 1):nrow(prophet_df), ]
# scales_to_test <- c(0.5, 1, 1.5, 5, 10, 50, 100)
scales_to_test <- c(0.5, 0.6, 0.7, 0.8, 0.9)
results <- data.frame(
scale = numeric(),
train_rmse = numeric(),
test_rmse = numeric()
)
for (s in scales_to_test) {
# Fit the Prophet model with the current scale value
m <- HoltWinters(ts_train,alpha = s, beta = 0.02, gamma = 1)
forecasted_train <- predict(es1, n.ahead=length(prophet_df_test))
train_rmse <- sqrt(mean((prophet_df_train$y - forecasted_train$mean)^2))
fr <- forecast(es1, h=length(test))
test_rmse <- sqrt(mean((prophet_df_test$y - fr$mean)^2))
results <- rbind(results, data.frame(
scale = s,
train_rmse = train_rmse,
test_rmse = test_rmse
))
}
prophet_df <- data.frame(ds = df_clean$date, y = df_clean$average)
train_size <- 120
prophet_df_train <- prophet_df[1:train_size, ]
prophet_df_test <- prophet_df[(train_size + 1):nrow(prophet_df), ]
# scales_to_test <- c(0.5, 1, 1.5, 5, 10, 50, 100)
scales_to_test <- c(0.5, 0.6, 0.7, 0.8, 0.9)
results <- data.frame(
scale = numeric(),
train_rmse = numeric(),
test_rmse = numeric()
)
for (s in scales_to_test) {
# Fit the Prophet model with the current scale value
m <- HoltWinters(ts_train,alpha = s, beta = 0.02, gamma = 1)
forecasted_train <- predict(es1, n.ahead=length(prophet_df_test))
train_rmse <- sqrt(mean((prophet_df_train$y - forecasted_train)^2))
fr <- forecast(es1, h=length(test))
test_rmse <- sqrt(mean((prophet_df_test$y - fr$mean)^2))
results <- rbind(results, data.frame(
scale = s,
train_rmse = train_rmse,
test_rmse = test_rmse
))
}
# Set the range of alpha values to test
scales_to_test <- c(0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
# Store results
results <- data.frame(
alpha = numeric(),
train_rmse = numeric(),
test_rmse = numeric()
)
# Loop through each alpha value
for (s in scales_to_test) {
m <- HoltWinters(ts_train, alpha = s, beta = 0.02, gamma = 1)
train_rmse <- sqrt(mean((ts_train - m$fitted[, "xhat"])^2, na.rm = TRUE))
fr <- forecast(m, h = length(ts_test))
test_rmse <- sqrt(mean((ts_test - fr$mean)^2, na.rm = TRUE))
results <- rbind(results, data.frame(
alpha = s,
train_rmse = train_rmse,
test_rmse = test_rmse
))
}
plot(results$alpha, results$test_rmse,
type = "b",
xlab = "Alpha (Smoothing Parameter)",
ylab = "RMSE",
main = "Holt-Winters Model Validation Curve",
ylim = range(c(results$train_rmse, results$test_rmse)),
col = "red",
pch = 16,
cex = 1.5,
lwd = 2)
# Add the training set RMSE to the plot
lines(results$alpha, results$train_rmse,
type = "b",
col = "blue",
pch = 16,
cex = 1.5,
lwd = 2)
# Add a legend
legend("topright",
legend = c("Test RMSE", "Training RMSE"),
col = c("red", "blue"),
pch = 16,
lwd = 2,
cex = 0.8)
es1 <- HoltWinters(ts_train,alpha = 0.9, beta = 0.02, gamma = 1)
es1
checkresiduals(es1)
fc <- forecast(es1, h=length(test))
forecast::accuracy(fc, ts_test)
forecast <- predict(es1, n.ahead=length(test), prediction.interval=T, level=.95)
layout(matrix(c(1,1)))
plot(ts_data,
main = "HltWinters Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
lines(es1$fitted[, "xhat"], col = "red")
lines(fc$mean, col = "blue")
polygon(c(time(fc$mean), rev(time(fc$mean))),
c(fc$lower[,2], rev(fc$upper[,2])),   # 95% CI (2nd column)
col = rgb(0, 0, 1, 0.2), border = NA)
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast", "95% CI"),
col = c("black", "red", "blue", rgb(0,0,1,0.2)),
lty = c(1,1,1, NA),
pch = c(NA, NA, NA, 15),
pt.cex = 2,
cex = 0.8)
# Set the range of alpha values to test
scales_to_test <- seq(from = 0, to = 1, by = 0.05)
# Store results
results <- data.frame(
alpha = numeric(),
train_rmse = numeric(),
test_rmse = numeric()
)
# Loop through each alpha value
for (s in scales_to_test) {
m <- HoltWinters(ts_train, alpha = s, beta = 0.02, gamma = 1)
train_rmse <- sqrt(mean((ts_train - m$fitted[, "xhat"])^2, na.rm = TRUE))
fr <- forecast(m, h = length(ts_test))
test_rmse <- sqrt(mean((ts_test - fr$mean)^2, na.rm = TRUE))
results <- rbind(results, data.frame(
alpha = s,
train_rmse = train_rmse,
test_rmse = test_rmse
))
}
# Set the range of alpha values to test
scales_to_test <- seq(from = 0.1, to = 1, by = 0.05)
# Store results
results <- data.frame(
alpha = numeric(),
train_rmse = numeric(),
test_rmse = numeric()
)
# Loop through each alpha value
for (s in scales_to_test) {
m <- HoltWinters(ts_train, alpha = s, beta = 0.02, gamma = 1)
train_rmse <- sqrt(mean((ts_train - m$fitted[, "xhat"])^2, na.rm = TRUE))
fr <- forecast(m, h = length(ts_test))
test_rmse <- sqrt(mean((ts_test - fr$mean)^2, na.rm = TRUE))
results <- rbind(results, data.frame(
alpha = s,
train_rmse = train_rmse,
test_rmse = test_rmse
))
}
plot(results$alpha, results$test_rmse,
type = "b",
xlab = "Alpha (Smoothing Parameter)",
ylab = "RMSE",
main = "Holt-Winters Model Validation Curve",
ylim = range(c(results$train_rmse, results$test_rmse)),
col = "red",
pch = 16,
cex = 1.5,
lwd = 2)
# Add the training set RMSE to the plot
lines(results$alpha, results$train_rmse,
type = "b",
col = "blue",
pch = 16,
cex = 1.5,
lwd = 2)
# Add a legend
legend("topright",
legend = c("Test RMSE", "Training RMSE"),
col = c("red", "blue"),
pch = 16,
lwd = 2,
cex = 0.8)
es1 <- HoltWinters(ts_train,alpha = 1, beta = 0.02, gamma = 1)
es1
checkresiduals(es1)
fc <- forecast(es1, h=length(test))
forecast::accuracy(fc, ts_test)
forecast <- predict(es1, n.ahead=length(test), prediction.interval=T, level=.95)
layout(matrix(c(1,1)))
plot(ts_data,
main = "HltWinters Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
lines(es1$fitted[, "xhat"], col = "red")
lines(fc$mean, col = "blue")
polygon(c(time(fc$mean), rev(time(fc$mean))),
c(fc$lower[,2], rev(fc$upper[,2])),   # 95% CI (2nd column)
col = rgb(0, 0, 1, 0.2), border = NA)
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast", "95% CI"),
col = c("black", "red", "blue", rgb(0,0,1,0.2)),
lty = c(1,1,1, NA),
pch = c(NA, NA, NA, 15),
pt.cex = 2,
cex = 0.8)
es1 <- HoltWinters(ts_train,alpha = 0.9, beta = 0.02, gamma = 1)
es1
checkresiduals(es1)
fc <- forecast(es1, h=length(test))
forecast::accuracy(fc, ts_test)
forecast <- predict(es1, n.ahead=length(test), prediction.interval=T, level=.95)
layout(matrix(c(1,1)))
plot(ts_data,
main = "HltWinters Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
lines(es1$fitted[, "xhat"], col = "red")
lines(fc$mean, col = "blue")
polygon(c(time(fc$mean), rev(time(fc$mean))),
c(fc$lower[,2], rev(fc$upper[,2])),   # 95% CI (2nd column)
col = rgb(0, 0, 1, 0.2), border = NA)
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast", "95% CI"),
col = c("black", "red", "blue", rgb(0,0,1,0.2)),
lty = c(1,1,1, NA),
pch = c(NA, NA, NA, 15),
pt.cex = 2,
cex = 0.8)
prophet_df <- data.frame(ds = df_clean$date, y = df_clean$average)
train_size <- 120
df_train <- prophet_df[1:train_size, ]
df_test <- prophet_df[(train_size + 1):nrow(prophet_df), ]
df_train <- df_train %>%
arrange(ds) %>%
mutate(lag1 = lag(y, 1)) %>%
na.omit()
m <- prophet(
yearly.seasonality = FALSE,
weekly.seasonality = FALSE,
daily.seasonality = FALSE,
changepoint.range = 0.7,
# interval.width = 0.95,
# changepoint.prior.scale = 15,
# seasonality.prior.scale = 15
)
m <- add_seasonality(m, name = 'yearly', period = 365.25, fourier.order = 15)
m <- add_seasonality(m, name = 'quarterly', period = 91.25, fourier.order = 12)
m <- add_regressor(m, 'lag1')
fit <- fit.prophet(m, df_train)
forecasted_train <- predict(fit, df_train)
residuals <- df_train$y - forecasted_train$yhat
ts_residuals <- ts(residuals)
checkresiduals(ts_residuals)
future <- df_test[, "ds", drop = FALSE]
fr <- predict(fit, future)
