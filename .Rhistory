checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
fit <- arima(ts_train, order=c(0,1,0), seasonal=list(order =c(1,1,1), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
fit <- arima(ts_train, order=c(0,1,0), seasonal=list(order =c(0,1,2), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
fit <- arima(ts_train, order=c(0,1,0), seasonal=list(order =c(2,1,1), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
fit <- arima(ts_train, order=c(0,1,0), seasonal=list(order =c(2,1,2), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
fit <- arima(ts_train, order=c(1,1,0), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
fit <- arima(ts_train, order=c(1,1,1), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
fit <- arima(ts_train, order=c(1,1,2), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
fit <- arima(ts_train, order=c(2,1,2), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
AIC <- matrix(0,3,3)
for (p in 0:2)
for (q in 0:2)
{
mod.fit <- arima(ts_train, order=c(p,1,q), seasonal=list(order =c(2,1,0), period=12))
AIC[p+1,q+1] <- mod.fit$aic
p
}
AIC
fit <- arima(ts_train, order=c(0,1,0), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
plot(ts_data,
main = "ARIMA Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
# Correctly access train using the fitted() function
lines(fitted(fit), col = "red")
lines(fr$mean, col="blue")
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast"),
col = c("black", "red", "blue"),
lty = 1,
cex = 0.8)
# -------------------------------
# ARIMA 1
# -------------------------------
fit <- arima(ts_train, order=c(0,1,0), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit)
summary(fit)
# Forecast for the manual fit arima
fr <- forecast(fit, h = length(test))
layout(matrix(c(1,1)))
plot(fit)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
plot(ts_data,
main = "ARIMA Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
# Correctly access train using the fitted() function
lines(fitted(fit), col = "red")
lines(fr$mean, col="blue")
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast"),
col = c("black", "red", "blue"),
lty = 1,
cex = 0.8)
# -------------------------------
# ARIMA 2
# -------------------------------
fit2 <- arima(ts_train, order=c(0,1,2), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit2)
summary(fit2)
# Forecast for the manual fit arima
fr <- forecast(fit2, h = length(test))
layout(matrix(c(1,1)))
plot(fit2)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
plot(ts_data,
main = "ARIMA Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
# Correctly access train using the fitted() function
lines(fitted(fit2), col = "red")
lines(fr$mean, col="blue")
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast"),
col = c("black", "red", "blue"),
lty = 1,
cex = 0.8)
library(readr)
library(dplyr)
library(lubridate)
library(forecast)
library(ggplot2)
library(tseries)
library(urca)
library(zoo)
library(prophet)
library(Metrics)
source("preprocessing.R")
source("stationary_test.R")
source("differencing_method.R")
source("ARIMA.R")
source("HtWinters.R")
source("Prophet.R")
# Read dataset
df <- read_csv("nitrous_oxide_concentration.csv")
print(df)
str(df)
processed_data <- preprocess_data()
df_clean = processed_data$df
ts_data = processed_data$ts_data
# show the resulting monthly data frame to check the output
print(df_clean)
# Plot time series
ggplot(df_clean, aes(x = date, y = average)) +
geom_line(color = "steelblue") +
labs(title = "Monthly Avg N2O Concentration from Jan 2010 to Dec 2023",
x = "date", y = "Avg Concentration")
# ggplot(df_clean, aes(x = average)) +
#   geom_histogram(fill = "skyblue", bins = 30, color = "black") +
#   labs(title = "Distribution of CO2 concentration",
#        x = "Avg Concentration", y = "Count")
stationary_test()
differencing_method()
Data <- df_clean$average
train_size <- floor(0.79 * length(Data))
train <- head(Data, train_size)
min_date <- min(df_clean$date)
min_year <- as.numeric(format(min_date, "%Y"))
min_month <- as.numeric(format(min_date, "%m"))
test  <- tail(Data, length(Data) - train_size)
ts_train <- ts(train,
frequency = 12,
start = c(min_year, min_month))
# Get the last date of the training set
last_train_date <- max(df_clean$date[1:length(train)])
first_test_date <- last_train_date %m+% months(1) # Find the date of the first observation in the test set
# Use the year and month of the first test date to set the start of the ts object
ts_test <- ts(test,
start = c(year(first_test_date), month(first_test_date)),
frequency = 12)
checkresiduals(ts_train)
library(readr)
library(dplyr)
library(lubridate)
library(forecast)
library(ggplot2)
library(tseries)
library(urca)
library(zoo)
library(prophet)
library(Metrics)
source("preprocessing.R")
source("stationary_test.R")
source("differencing_method.R")
source("ARIMA.R")
source("HtWinters.R")
source("Prophet.R")
# Read dataset
df <- read_csv("nitrous_oxide_concentration.csv")
print(df)
str(df)
processed_data <- preprocess_data()
df_clean = processed_data$df
ts_data = processed_data$ts_data
# show the resulting monthly data frame to check the output
print(df_clean)
# Plot time series
ggplot(df_clean, aes(x = date, y = average)) +
geom_line(color = "steelblue") +
labs(title = "Monthly Avg N2O Concentration from Jan 2010 to Dec 2023",
x = "date", y = "Avg Concentration")
# ggplot(df_clean, aes(x = average)) +
#   geom_histogram(fill = "skyblue", bins = 30, color = "black") +
#   labs(title = "Distribution of CO2 concentration",
#        x = "Avg Concentration", y = "Count")
stationary_test()
differencing_method()
Data <- df_clean$average
train_size <- floor(0.79 * length(Data))
train <- head(Data, train_size)
min_date <- min(df_clean$date)
min_year <- as.numeric(format(min_date, "%Y"))
min_month <- as.numeric(format(min_date, "%m"))
test  <- tail(Data, length(Data) - train_size)
ts_train <- ts(train,
frequency = 12,
start = c(min_year, min_month))
# Get the last date of the training set
last_train_date <- max(df_clean$date[1:length(train)])
first_test_date <- last_train_date %m+% months(1) # Find the date of the first observation in the test set
# Use the year and month of the first test date to set the start of the ts object
ts_test <- ts(test,
start = c(year(first_test_date), month(first_test_date)),
frequency = 12)
checkresiduals(ts_train)
ARIMA_method()
library(readr)
library(dplyr)
library(lubridate)
library(forecast)
library(ggplot2)
library(tseries)
library(urca)
library(zoo)
library(prophet)
library(Metrics)
source("preprocessing.R")
source("stationary_test.R")
source("differencing_method.R")
source("ARIMA.R")
source("HtWinters.R")
source("Prophet.R")
# Read dataset
df <- read_csv("nitrous_oxide_concentration.csv")
print(df)
str(df)
processed_data <- preprocess_data()
df_clean = processed_data$df
ts_data = processed_data$ts_data
# show the resulting monthly data frame to check the output
print(df_clean)
# Plot time series
ggplot(df_clean, aes(x = date, y = average)) +
geom_line(color = "steelblue") +
labs(title = "Monthly Avg N2O Concentration from Jan 2010 to Dec 2023",
x = "date", y = "Avg Concentration")
# ggplot(df_clean, aes(x = average)) +
#   geom_histogram(fill = "skyblue", bins = 30, color = "black") +
#   labs(title = "Distribution of CO2 concentration",
#        x = "Avg Concentration", y = "Count")
stationary_test()
differencing_method()
Data <- df_clean$average
train_size <- floor(0.79 * length(Data))
train <- head(Data, train_size)
min_date <- min(df_clean$date)
min_year <- as.numeric(format(min_date, "%Y"))
min_month <- as.numeric(format(min_date, "%m"))
test  <- tail(Data, length(Data) - train_size)
ts_train <- ts(train,
frequency = 12,
start = c(min_year, min_month))
# Get the last date of the training set
last_train_date <- max(df_clean$date[1:length(train)])
first_test_date <- last_train_date %m+% months(1) # Find the date of the first observation in the test set
# Use the year and month of the first test date to set the start of the ts object
ts_test <- ts(test,
start = c(year(first_test_date), month(first_test_date)),
frequency = 12)
checkresiduals(ts_train)
ARIMA_method()
library(readr)
library(dplyr)
library(lubridate)
library(forecast)
library(ggplot2)
library(tseries)
library(urca)
library(zoo)
library(prophet)
library(Metrics)
source("preprocessing.R")
source("stationary_test.R")
source("differencing_method.R")
source("ARIMA.R")
source("HtWinters.R")
source("Prophet.R")
# Read dataset
df <- read_csv("nitrous_oxide_concentration.csv")
print(df)
str(df)
processed_data <- preprocess_data()
df_clean = processed_data$df
ts_data = processed_data$ts_data
# show the resulting monthly data frame to check the output
print(df_clean)
# Plot time series
ggplot(df_clean, aes(x = date, y = average)) +
geom_line(color = "steelblue") +
labs(title = "Monthly Avg N2O Concentration from Jan 2010 to Dec 2023",
x = "date", y = "Avg Concentration")
# ggplot(df_clean, aes(x = average)) +
#   geom_histogram(fill = "skyblue", bins = 30, color = "black") +
#   labs(title = "Distribution of CO2 concentration",
#        x = "Avg Concentration", y = "Count")
stationary_test()
differencing_method()
Data <- df_clean$average
train_size <- floor(0.79 * length(Data))
train <- head(Data, train_size)
min_date <- min(df_clean$date)
min_year <- as.numeric(format(min_date, "%Y"))
min_month <- as.numeric(format(min_date, "%m"))
test  <- tail(Data, length(Data) - train_size)
ts_train <- ts(train,
frequency = 12,
start = c(min_year, min_month))
# Get the last date of the training set
last_train_date <- max(df_clean$date[1:length(train)])
first_test_date <- last_train_date %m+% months(1) # Find the date of the first observation in the test set
# Use the year and month of the first test date to set the start of the ts object
ts_test <- ts(test,
start = c(year(first_test_date), month(first_test_date)),
frequency = 12)
checkresiduals(ts_train)
library(readr)
library(dplyr)
library(lubridate)
library(forecast)
library(ggplot2)
library(tseries)
library(urca)
library(zoo)
library(prophet)
library(Metrics)
source("preprocessing.R")
source("stationary_test.R")
source("differencing_method.R")
source("ARIMA.R")
source("HtWinters.R")
source("Prophet.R")
# Read dataset
df <- read_csv("nitrous_oxide_concentration.csv")
print(df)
str(df)
processed_data <- preprocess_data()
df_clean = processed_data$df
ts_data = processed_data$ts_data
# show the resulting monthly data frame to check the output
print(df_clean)
# Plot time series
ggplot(df_clean, aes(x = date, y = average)) +
geom_line(color = "steelblue") +
labs(title = "Monthly Avg N2O Concentration from Jan 2010 to Dec 2023",
x = "date", y = "Avg Concentration")
# ggplot(df_clean, aes(x = average)) +
#   geom_histogram(fill = "skyblue", bins = 30, color = "black") +
#   labs(title = "Distribution of CO2 concentration",
#        x = "Avg Concentration", y = "Count")
stationary_test()
differencing_method()
Data <- df_clean$average
train_size <- floor(0.79 * length(Data))
train <- head(Data, train_size)
min_date <- min(df_clean$date)
min_year <- as.numeric(format(min_date, "%Y"))
min_month <- as.numeric(format(min_date, "%m"))
test  <- tail(Data, length(Data) - train_size)
ts_train <- ts(train,
frequency = 12,
start = c(min_year, min_month))
# Get the last date of the training set
last_train_date <- max(df_clean$date[1:length(train)])
first_test_date <- last_train_date %m+% months(1) # Find the date of the first observation in the test set
# Use the year and month of the first test date to set the start of the ts object
ts_test <- ts(test,
start = c(year(first_test_date), month(first_test_date)),
frequency = 12)
checkresiduals(ts_train)
fit2 <- arima(ts_train, order=c(2,1,0), seasonal=list(order =c(0,1,2), period=12))
checkresiduals(fit2)
summary(fit2)
# Forecast for the manual fit arima
fr <- forecast(fit2, h = length(test))
layout(matrix(c(1,1)))
plot(fit2)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
num_seasonal_diff <- nsdiffs(ts_data)
num_nonseasonal_diff <- ndiffs(ts_data)
# Print clearly
cat("Non-seasonal differences needed:", num_nonseasonal_diff, "\n")
cat("Seasonal differences needed:", num_seasonal_diff, "\n")
num_seasonal_diff <- nsdiffs(ts_data)
num_nonseasonal_diff <- ndiffs(ts_data)
cat("Non-seasonal differences needed:", num_nonseasonal_diff, "\n")
cat("Seasonal differences needed:", num_seasonal_diff, "\n")
num_seasonal_diff <- nsdiffs(ts_data)
num_nonseasonal_diff <- ndiffs(ts_data)
cat("Non-seasonal differences needed:", num_nonseasonal_diff, "\n")
cat("Seasonal differences needed:", num_seasonal_diff, "\n")
# -------------------------------
# ARIMA 2
# -------------------------------
fit2 <- arima(ts_train, order=c(1,1,0), seasonal=list(order =c(2,1,0), period=12))
checkresiduals(fit2)
summary(fit2)
# Forecast for the manual fit arima
fr <- forecast(fit2, h = length(test))
layout(matrix(c(1,1)))
plot(fit2)
layout(matrix(c(1,1)))
plot(fr)
lines(ts_test, col="turquoise2")
forecast::accuracy(fr, ts_test)
plot(ts_data,
main = "ARIMA Model Fit and Forecast vs Actual Data",
ylab = "Concentration (ppm)",
xlab = "Year",
col = "black")
# Correctly access train using the fitted() function
lines(fitted(fit2), col = "red")
lines(fr$mean, col="blue")
abline(v = start(ts_test), lty = 2, col = "grey")
legend("topleft",
legend = c("Actual Data", "Train", "Forecast"),
col = c("black", "red", "blue"),
lty = 1,
cex = 0.8)
